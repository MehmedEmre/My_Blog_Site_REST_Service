// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Blog_Site.DataAccess.Concrete.EntityFramework.Context;

namespace My_Blog_Site.DataAccess.Migrations
{
    [DbContext(typeof(MyBlogSiteContext))]
    [Migration("20201203214445_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Article_Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Article_Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Picture")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Publish_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("View_Count")
                        .HasColumnType("int");

                    b.Property<int?>("_CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_CategoryId");

                    b.ToTable("ArticleTable");
                });

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryTable");
                });

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment_Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment_Owner_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Publish_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("_ArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_ArticleId");

                    b.ToTable("CommentTable");
                });

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Article", b =>
                {
                    b.HasOne("My_Blog_Site.Entities.Entities.Category", "_Category")
                        .WithMany("Articles")
                        .HasForeignKey("_CategoryId");

                    b.Navigation("_Category");
                });

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Comment", b =>
                {
                    b.HasOne("My_Blog_Site.Entities.Entities.Article", "_Article")
                        .WithMany()
                        .HasForeignKey("_ArticleId");

                    b.Navigation("_Article");
                });

            modelBuilder.Entity("My_Blog_Site.Entities.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
